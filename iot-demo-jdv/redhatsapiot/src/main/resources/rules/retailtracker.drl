//created on: Oct 7, 2015
package retailtrackerdrl

//list any import classes here.
import org.jboss.brmspojos.CustomerObj;
import org.jboss.brmspojos.Department;
import org.jboss.brmspojos.DepartmentType;

import org.jboss.brmspojos.CustomerDeptEvent;
import org.jboss.brmspojos.CustomerMoveEvent;
import org.jboss.brmspojos.CustomerMoveObj;

import org.jboss.amqconnector.ClassificationMsgPublisher;

import org.jboss.sapconnector.SapServiceProcessor;

import org.w3c.dom.Document;


declare CustomerMoveEvent
    @role ( event )
end

rule "Customer moves and does not exist result in new customer for each department- mens"

when
CustomerMoveEvent( $custId : custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "MENS", $dloc: deptLocation, $dloc.contains( $location ))
not CustomerObj( custId == $custId)

then
System.out.println("moving "+$custId);


insert(new CustomerObj($custId, $location, $timestamp , 0 , dept.getDepartmentName()));
insert(new CustomerMoveObj($custId, 0));
end


rule "Customer moves and does not exist result in new customer for each department-formal"

when
CustomerMoveEvent( $custId : custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "FORMAL", $dloc: deptLocation, $dloc.contains( $location ))
not CustomerObj( custId == $custId)

then
System.out.println("moving "+$custId);

insert(new CustomerObj($custId, $location, $timestamp , 0 , dept.getDepartmentName()));
insert(new CustomerMoveObj($custId, 0));
end

rule "Customer moves and does not exist result in new customer for each department-boys"

when
CustomerMoveEvent( $custId : custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "BOYS", $dloc: deptLocation, $dloc.contains( $location ))
not CustomerObj( custId == $custId)

then
System.out.println("moving "+$custId);

insert(new CustomerObj($custId, $location, $timestamp , 0 , dept.getDepartmentName()));
insert(new CustomerMoveObj($custId, 0));
end

rule "Customer moves and does not exist result in new customer for each department-womens"

when
CustomerMoveEvent( $custId : custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "WOMENS", $dloc: deptLocation, $dloc.contains( $location ))
not CustomerObj( custId == $custId)

then
System.out.println("moving "+$custId);

insert(new CustomerObj($custId, $location, $timestamp , 0 , dept.getDepartmentName()));
insert(new CustomerMoveObj($custId, 0));
end


rule "Customer moves and does not exist result in new customer for each department-girls"

when
CustomerMoveEvent( $custId : custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "GIRLS", $dloc: deptLocation, $dloc.contains( $location ))
not CustomerObj( custId == $custId)

then
System.out.println("moving "+$custId);

insert(new CustomerObj($custId, $location, $timestamp , 0 , dept.getDepartmentName()));
insert(new CustomerMoveObj($custId, 0));
end

rule "Customer moves and does not exist result in new customer for each department-sportswear"

when
CustomerMoveEvent( $custId : custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "SPORTSWEAR", $dloc: deptLocation, $dloc.contains( $location ))
not CustomerObj( custId == $custId)

then
System.out.println("moving "+$custId);

insert(new CustomerObj($custId, $location, $timestamp , 0 , dept.getDepartmentName()));
insert(new CustomerMoveObj($custId, 0));
end

rule "Customer in Pharmacy department (special) then increment visit count and invoke web service"
no-loop
when 
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "MENS", $dloc: deptLocation, $dloc.contains( $location ))
custObj : CustomerObj( custId == $custId)
custMvObj : CustomerMoveObj( custId == $custId)
then
modify(custObj){setDeptVisitCount(custObj.getDeptVisitCount() + 1), setDeptName(dept.getDepartmentName())};
modify(custMvObj){setTotalMoves(custMvObj.getTotalMoves() + 1)};
System.out.println("department " +dept.getDepartmentName());
System.out.println("customer's MENS visit count " +custObj.getDeptVisitCount());
Document doc = SapServiceProcessor.constructCustomerMove($custId, $location, $timestamp);
SapServiceProcessor.processXml(doc,SapServiceProcessor.CUST_MOVE_URL_CALL);

end


rule "Customer in food department (special) then increment visit count and invoke web service"
no-loop
when 
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "FORMAL", $dloc: deptLocation, $dloc.contains( $location ))
custObj : CustomerObj( custId == $custId)
custMvObj : CustomerMoveObj( custId == $custId)

then
modify(custObj){setDeptVisitCount(custObj.getDeptVisitCount() + 1), setDeptName(dept.getDepartmentName())};
modify(custMvObj){setTotalMoves(custMvObj.getTotalMoves() + 1)};
System.out.println("department " +dept.getDepartmentName());
System.out.println("customer's FORMAL visit count " +custObj.getDeptVisitCount());
Document doc = SapServiceProcessor.constructCustomerMove($custId, $location, $timestamp);
SapServiceProcessor.processXml(doc,SapServiceProcessor.CUST_MOVE_URL_CALL);

end

rule "If the Customer is in a Regular Department BOYS update visit count"
no-loop
when
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "BOYS", $dloc: deptLocation, $dloc.contains( $location ))

custObj :CustomerObj( custId == $custId , deptName == "BOYS")
custMvObj : CustomerMoveObj( custId == $custId)

then
modify(custObj){setDeptVisitCount(custObj.getDeptVisitCount() + 1), setDeptName(dept.getDepartmentName())};
modify(custMvObj){setTotalMoves(custMvObj.getTotalMoves() + 1)};

end

rule "If the Customer is in a Regular Department WOMEN update visit count"
no-loop
when
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "WOMEN", $dloc: deptLocation, $dloc.contains( $location ))

custObj :CustomerObj( custId == $custId , deptName == "WOMEN")
custMvObj : CustomerMoveObj( custId == $custId)

then
modify(custObj){setDeptVisitCount(custObj.getDeptVisitCount() + 1), setDeptName(dept.getDepartmentName())};
modify(custMvObj){setTotalMoves(custMvObj.getTotalMoves() + 1)};

end

rule "If the Customer is in a Regular Department GIRLS update visit count"
no-loop
when
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "GIRLS", $dloc: deptLocation, $dloc.contains( $location ))

custObj :CustomerObj( custId == $custId , deptName == "GIRLS")
custMvObj : CustomerMoveObj( custId == $custId)

then
modify(custObj){setDeptVisitCount(custObj.getDeptVisitCount() + 1), setDeptName(dept.getDepartmentName())};
modify(custMvObj){setTotalMoves(custMvObj.getTotalMoves() + 1)};

end

rule "If the Customer is in a Regular Department SPORTSWEAR update visit count"
no-loop
when
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "SPORTSWEAR", $dloc: deptLocation, $dloc.contains( $location ))

custObj :CustomerObj( custId == $custId , deptName == "SPORTSWEAR")
custMvObj : CustomerMoveObj( custId == $custId)

then
modify(custObj){setDeptVisitCount(custObj.getDeptVisitCount() + 1), setDeptName(dept.getDepartmentName())};
modify(custMvObj){setTotalMoves(custMvObj.getTotalMoves() + 1)};

end



rule "If the Customer is in a Regular Department BOYS log only if customer moves more than 3 times"

when
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
dept : Department(departmentName == "BOYS", $dloc: deptLocation, $dloc.contains( $location ))

custObj :CustomerObj( custId == $custId , deptName == "BOYS", deptVisitCount == 3)
then

// call web service api 
System.out.println("log if customer visit 3 or more times in regular department WOMENS");
Document doc = SapServiceProcessor.constructCustomerEntry($custId, DepartmentType.BOYS.getDeptId(), $timestamp);
SapServiceProcessor.processXml(doc,SapServiceProcessor.CUST_ENTRY_URL_CALL);
end

rule "If the Customer is in a Regular Department FORMAL log  only if customer moves more than 3 times"

when
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
custObj :CustomerObj( custId == $custId , deptName == "FORMAL", deptVisitCount == 3)
then

// call web service api 
System.out.println("regular department FORMAL");
Document doc = SapServiceProcessor.constructCustomerEntry($custId, DepartmentType.FORMAL.getDeptId(), $timestamp);
SapServiceProcessor.processXml(doc,SapServiceProcessor.CUST_ENTRY_URL_CALL);
end

rule "If the Customer is in a Regular Department GIRLS log  only if customer moves more than 3 times"

when
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
custObj :CustomerObj( custId == $custId , deptName == "GIRLS", deptVisitCount == 3)
then

// call web service api 
System.out.println("regular department GIRLS");
Document doc = SapServiceProcessor.constructCustomerEntry($custId, DepartmentType.GIRLS.getDeptId(), $timestamp);
SapServiceProcessor.processXml(doc,SapServiceProcessor.CUST_ENTRY_URL_CALL);
end

rule "If the Customer is in a Regular Department MENS log  only if customer moves more than 3 times"

when
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
custObj :CustomerObj( custId == $custId , deptName == "MENS", deptVisitCount == 3)
then

// call web service api 
System.out.println("regular department MENS");
Document doc = SapServiceProcessor.constructCustomerEntry($custId, DepartmentType.MENS.getDeptId(), $timestamp);
SapServiceProcessor.processXml(doc,SapServiceProcessor.CUST_ENTRY_URL_CALL);
end

rule "Customer is a fast moving customer"

when
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
custMvObj :CustomerMoveObj( custId == $custId , totalMoves == 1)
then

// call web service api 
System.out.println("customer classification is focused fast moving customer");
Document doc = SapServiceProcessor.constructCustomerClass($custId, 2 , $timestamp);
SapServiceProcessor.processXml(doc,SapServiceProcessor.CUST_CLASS_URL_CALL);
System.out.println("publish to salesnotification topic");
ClassificationMsgPublisher.doDemo($custId, $location, $timestamp, "focused customer");
end

rule "Customer is a browsing customer"

when
CustomerMoveEvent($custId :custId, $location : location, $timestamp : timestamp)
custMvObj :CustomerMoveObj( custId == $custId , totalMoves == 1)
then

// call web service api 
System.out.println("customer classification is a browsing customer");
Document doc = SapServiceProcessor.constructCustomerClass($custId, 1 , $timestamp);
SapServiceProcessor.processXml(doc,SapServiceProcessor.CUST_CLASS_URL_CALL);
System.out.println("publish to salesnotification topic");

ClassificationMsgPublisher.doDemo($custId, $location, $timestamp, "browsing customer");

end

